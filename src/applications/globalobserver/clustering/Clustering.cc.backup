#include "Clustering.h"

Define_Module(Clustering);

Clustering::Clustering()
{
   hops = 0;
   range = 0;
   update = NULL;
   updateDelay = 0.0;
   receivedMessages = 0;
   criterion = " ";
}

Clustering::~Clustering(){}

void
Clustering::initialize()
{
   hops = (uint8_t)par("hops");
   range = (uint8_t)par("range");
   updateDelay = par("updateDelay");
   criterion = par("criterion").stringValue();
   update = new cMessage;
   scheduleAt(simTime()+updateDelay, update);
}

void
Clustering::handleMessage(cMessage* msg)
{
   if(msg->isSelfMessage())
   {
      if(receivedMessages == 0)
      {
         delete msg;
         endSimulation();
      }
      else
         receivedMessages = 0;
      updateTable();
      scheduleAt(simTime()+1, update);
   }
   else
   {
      Notification* data = 
      check_and_cast<Notification*>(msg);
      auto id = data->getSource();
      ev << "Notification from: "<< id << endl;
      globalNodeTable.setPosition(id, data->getPosition());
      globalNodeTable.
      setPauseTime(id, data->getPauseTime());
      globalNodeTable.
      setMotionTime(id, data->getMotionTime());
      globalNodeTable.setSpeed(id, data->getSpeed());
      globalNodeTable.
      setFlightLength(id, data->getFlightLength());
      receivedMessages++;
      delete msg;
   }
}

void
Clustering::updateTable()
{
   computeNeighborhood();
   ev << globalNodeTable.info() << endl;
}

//It's supposed leaderID never equals 1000; zero is a most
//suitable value than 1000, but the mobility module doesn't
//work with IDs computed by a random number generator
//TODO: A initialized cluster list is needed
void
Clustering::clustering()
{
   uint32_t leaderID;
   //by default, all nodes start in the UNCLUSTERED status
   do
   {
      leaderID = getLeader();
      makeCluster(leaderID);
      ev << "Leader ID: " << leaderID << endl;
   }while(leaderID != 1000);
   if(ev.isGUI())
      changeIconColor();
}

void
Clustering::changeIconColor()
{
   cModule* host;
   uint32_t index;
   for(auto& pair : globalNodeTable)
   {
      index = pair.second.getID();//first?
      host = simulation.
             getSystemModule()->getSubmodule("host", index);
      if(host)
      {
         cDisplayString& displayString = host->getDisplayString();
         if(globalNodeTable.getRole(index) == role::LEADER)
            displayString.parse("i=device/pocketpc_s,blue");
         else if (globalNodeTable.getRole(index) == role::CLUSTERED)
            displayString.parse("i=device/pocketpc_s,gold");
      }
   }
}

void
Clustering::makeCluster(uint32_t leaderID)
{
   Neighborhood cluster;
   if(leaderID != 1000)
   {
      //set role LEADER
      globalNodeTable.insert(leaderID, role::LEADER);
      //set cid
      globalNodeTable.insert(leaderID, leaderID);
      cluster = globalNodeTable.
                getKhopNeighborhood(leaderID);
      //cluster all nodes that belongs to the k-hop
      //neighborhood of the leader.
      for(auto& neighbor : cluster)
         if(globalNodeTable.getRole(neighbor) == 
            role::UNCLUSTERED)
         {
            //set role CLUSTERED
            globalNodeTable.insert(neighbor, role::CLUSTERED);
            //set as CID the leader ID
            globalNodeTable.insert(neighbor, leaderID);
         }
   }
}

//returns the id of the node with the greatest aptitude
uint32_t
Clustering::getLeader()
{
   uint32_t leaderID;
   if(criterion == "degree")
      leaderID = getLeaderByDegree();
   return leaderID;
}

//TODO: set UID like cellular number
uint32_t
Clustering::getLeaderByDegree()
{
   uint32_t leaderID = 1000;
   //uint8_t maxDegree = 0;
   for(auto& pair: globalNodeTable)
      std::cout << "Time: " << simTime().dbl() << " "
                << "ID: " << pair.second.getID() << " "
                << "Role: " << (int)pair.second.getRole()
                << std::endl;

   return leaderID;
}

void
Clustering::computeNeighborhood()
{
   Neighborhood oneHopVicinity, kHopVicinity;
   uint32_t tempID;
   //Computes one hop neighborhood for all nodes
   for(auto& pair: globalNodeTable)
   {
      tempID = pair.second.getID();
      oneHopVicinity = computeNeighborhood(tempID);
      globalNodeTable.insert(tempID, oneHopVicinity, true);
   }
   //Computes k hop neighborhood for all nodes
   for(auto& pair: globalNodeTable)
   {
      tempID = pair.second.getID();
      kHopVicinity = computeNeighborhood(tempID, hops);
      globalNodeTable.insert(tempID, kHopVicinity, false);
   }
}

Neighborhood
Clustering::
computeNeighborhood(uint32_t nodeID)
{
   Neighborhood n;
   //Quick access to the node data
   Coord mypos = 
   globalNodeTable.getPosition(nodeID);
   
   for(auto& pair : globalNodeTable)
      if
      (
         nodeID != pair.second.getID() &&
         mypos.distance(pair.second.getPosition()) < range
      )
         n.insert(pair.second.getID());
   return n;
}
//k is the number of hops
Neighborhood
Clustering::computeNeighborhood(uint32_t nodeID, uint8_t k)
{
   Neighborhood n;
   //get the neighborhood of the node with ID = nodeID
   n = globalNodeTable.getOneHopNeighborhood(nodeID);
   if(k>1)
      for(auto& neighbor : n)//for each neighbor in n
         n += computeNeighborhood(neighbor, k-1);
   n.erase(nodeID);
   return n;
}
